{"ast":null,"code":"import{create}from'zustand';import{persist}from'zustand/middleware';import{authAPI}from'../services/api';export const useAuthStore=create()(persist((set,get)=>({// Initial state\nuser:null,accessToken:null,refreshToken:null,isAuthenticated:false,isLoading:false,error:null,// Actions\nlogin:async credentials=>{set({isLoading:true,error:null});try{const response=await authAPI.login(credentials);set({user:response.user,accessToken:response.access_token,refreshToken:response.refresh_token,isAuthenticated:true,isLoading:false,error:null});// Store tokens in localStorage for persistence\nlocalStorage.setItem('access_token',response.access_token);localStorage.setItem('refresh_token',response.refresh_token);localStorage.setItem('user',JSON.stringify(response.user));}catch(error){set({isLoading:false,error:error.message||'Login failed'});throw error;}},logout:async()=>{set({isLoading:true});try{await authAPI.logout();}catch(error){// Continue with logout even if API call fails\nconsole.error('Logout API error:',error);}finally{get().clearAuth();set({isLoading:false});}},refreshAuth:async()=>{const{refreshToken}=get();if(!refreshToken){get().clearAuth();return;}set({isLoading:true});try{const response=await authAPI.refreshToken(refreshToken);set({accessToken:response.access_token,isLoading:false,error:null});localStorage.setItem('access_token',response.access_token);}catch(error){get().clearAuth();set({isLoading:false,error:error.message||'Token refresh failed'});}},setUser:user=>{set({user});localStorage.setItem('user',JSON.stringify(user));},setTokens:(accessToken,refreshToken)=>{set({accessToken,refreshToken,isAuthenticated:true});localStorage.setItem('access_token',accessToken);localStorage.setItem('refresh_token',refreshToken);},clearAuth:()=>{set({user:null,accessToken:null,refreshToken:null,isAuthenticated:false,error:null});localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('user');},setLoading:loading=>{set({isLoading:loading});},setError:error=>{set({error});}}),{name:'auth-storage',partialize:state=>({user:state.user,accessToken:state.accessToken,refreshToken:state.refreshToken,isAuthenticated:state.isAuthenticated})}));// Selectors for better performance\nexport const useUser=()=>useAuthStore(state=>state.user);export const useIsAuthenticated=()=>useAuthStore(state=>state.isAuthenticated);export const useIsLoading=()=>useAuthStore(state=>state.isLoading);export const useAuthError=()=>useAuthStore(state=>state.error);export const useAccessToken=()=>useAuthStore(state=>state.accessToken);","map":{"version":3,"names":["create","persist","authAPI","useAuthStore","set","get","user","accessToken","refreshToken","isAuthenticated","isLoading","error","login","credentials","response","access_token","refresh_token","localStorage","setItem","JSON","stringify","message","logout","console","clearAuth","refreshAuth","setUser","setTokens","removeItem","setLoading","loading","setError","name","partialize","state","useUser","useIsAuthenticated","useIsLoading","useAuthError","useAccessToken"],"sources":["C:/AquaTrak-Project/src/frontend/src/store/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { User, LoginRequest } from '../types/api';\nimport { authAPI } from '../services/api';\n\ninterface AuthState {\n  // State\n  user: User | null;\n  accessToken: string | null;\n  refreshToken: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  login: (credentials: LoginRequest) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshAuth: () => Promise<void>;\n  setUser: (user: User) => void;\n  setTokens: (accessToken: string, refreshToken: string) => void;\n  clearAuth: () => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      user: null,\n      accessToken: null,\n      refreshToken: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n\n      // Actions\n      login: async (credentials: LoginRequest) => {\n        set({ isLoading: true, error: null });\n        try {\n          const response = await authAPI.login(credentials);\n          \n          set({\n            user: response.user,\n            accessToken: response.access_token,\n            refreshToken: response.refresh_token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n\n          // Store tokens in localStorage for persistence\n          localStorage.setItem('access_token', response.access_token);\n          localStorage.setItem('refresh_token', response.refresh_token);\n          localStorage.setItem('user', JSON.stringify(response.user));\n        } catch (error: any) {\n          set({\n            isLoading: false,\n            error: error.message || 'Login failed',\n          });\n          throw error;\n        }\n      },\n\n      logout: async () => {\n        set({ isLoading: true });\n        try {\n          await authAPI.logout();\n        } catch (error) {\n          // Continue with logout even if API call fails\n          console.error('Logout API error:', error);\n        } finally {\n          get().clearAuth();\n          set({ isLoading: false });\n        }\n      },\n\n      refreshAuth: async () => {\n        const { refreshToken } = get();\n        if (!refreshToken) {\n          get().clearAuth();\n          return;\n        }\n\n        set({ isLoading: true });\n        try {\n          const response = await authAPI.refreshToken(refreshToken);\n          \n          set({\n            accessToken: response.access_token,\n            isLoading: false,\n            error: null,\n          });\n\n          localStorage.setItem('access_token', response.access_token);\n        } catch (error: any) {\n          get().clearAuth();\n          set({\n            isLoading: false,\n            error: error.message || 'Token refresh failed',\n          });\n        }\n      },\n\n      setUser: (user: User) => {\n        set({ user });\n        localStorage.setItem('user', JSON.stringify(user));\n      },\n\n      setTokens: (accessToken: string, refreshToken: string) => {\n        set({\n          accessToken,\n          refreshToken,\n          isAuthenticated: true,\n        });\n        localStorage.setItem('access_token', accessToken);\n        localStorage.setItem('refresh_token', refreshToken);\n      },\n\n      clearAuth: () => {\n        set({\n          user: null,\n          accessToken: null,\n          refreshToken: null,\n          isAuthenticated: false,\n          error: null,\n        });\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('user');\n      },\n\n      setLoading: (loading: boolean) => {\n        set({ isLoading: loading });\n      },\n\n      setError: (error: string | null) => {\n        set({ error });\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({\n        user: state.user,\n        accessToken: state.accessToken,\n        refreshToken: state.refreshToken,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n\n// Selectors for better performance\nexport const useUser = () => useAuthStore((state) => state.user);\nexport const useIsAuthenticated = () => useAuthStore((state) => state.isAuthenticated);\nexport const useIsLoading = () => useAuthStore((state) => state.isLoading);\nexport const useAuthError = () => useAuthStore((state) => state.error);\nexport const useAccessToken = () => useAuthStore((state) => state.accessToken); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}