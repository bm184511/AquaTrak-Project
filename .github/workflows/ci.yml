# This code is proprietary to AquaTrak. Unauthorized use is strictly prohibited.

name: AquaTrak CI Pipeline

on:
  push:
    branches: [ fix/lint-test-security-errors ]

jobs:
  lint-test-scan:
    runs-on: ubuntu-latest
    env:
      PYTHONIOENCODING: "utf-8"
      LANG: "C.UTF-8"
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # **گام جدید: تنظیم نسخه پایتون (اینجا اضافه شود)**
    - name: Setup Python
      uses: actions/setup-python@v4 # استفاده از نسخه 4 اکشن
      with:
        python-version: '3.11' # تغییر از پیش‌فرض یا هر نسخه دیگر به 3.11

    # **گام جدید: نصب GDAL Development Libraries (اینجا اضافه شود)**
    - name: Install GDAL Libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y libgdal-dev gdal-bin

    # 1. Cache optimization (should be before installing dependencies)
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    # **انتقال یافته: گام نصب وابستگی‌های پایتون (اینجا قرار می‌گیرد)**
    - name: Install Python dependencies
      run: pip install -r requirements.txt

    # 2. Inspect and fix encoding issues (این گام‌ها اکنون بعد از نصب black قرار می‌گیرند)
    - name: Run Encoding Fixer
      run: python fix_encoding.py
      
    - name: Inspect Black Installation
      run: |
        echo "===== Black File Hexdump ====="
        # حالا black نصب شده است
        hexdump -C $(python -c "import black; print(black.__file__)") | head -n 20
        echo "===== File Type ====="
        file $(python -c "import black; print(black.__file__)")

    # 3. Force reinstall Black with UTF-8 enforcement (این گام ممکن است دیگر ضروری نباشد اما برای اطمینان نگه می‌داریم)
    - name: Reinstall Black (UTF-8 Safe)
      run: |
        pip uninstall -y black # ابتدا black نصب شده را حذف می کند
        pip install --no-cache-dir --force-reinstall \
          --global-option="--compile-bytecode" \
          --no-binary :all: \
          black==23.12.1  # Pin version for stability

    # 4. Linting with Flake8 using setup.cfg configuration
    - name: Run Flake8 (UTF-8 Enforced with Config)
      run: |
        echo "===== Flake8 Version ====="
        flake8 --version
        echo "===== Using setup.cfg configuration ====="
        flake8 . --config=setup.cfg --show-source --statistics

    # 5. Node.js setup for frontend
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json

    # 6. Frontend dependencies and security scan
    - name: Install frontend dependencies
      working-directory: src/frontend
      run: npm ci --audit --fund=false --loglevel=error

    - name: Verify node_modules
      working-directory: src/frontend
      run: |
        echo "===== node_modules Size ====="
        du -sh node_modules
        echo "===== snyk.modules Check ====="
        find . -name snyk.modules -ls

    - name: Run Snyk Security Scan
      working-directory: src/frontend
      run: |
        npx snyk test --file=package.json \
          --detection-depth=5 \
          --org=aquatrak \
          --project-name=${{ github.repository }} \
          --sarif-file-output=snyk.sarif
          
    # 7. Upload results for analysis
    - name: Upload Snyk Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: src/frontend/snyk.sarif 