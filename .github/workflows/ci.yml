# This code is proprietary to AquaTrak. Unauthorized use is strictly prohibited.

name: AquaTrak CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: aquatrak_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/aquatrak_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy
    
    - name: Fix file encodings
      run: |
        echo "üîß Running encoding fix script..."
        python fix_encoding.py
        echo "‚úÖ Encoding fix completed"
    
    - name: Inspect Problematic File
      run: |
        echo "üîç Inspecting Black installation for BOM issues..."
        hexdump -C /opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/black/__init__.py | head -n 10
        file /opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/black/__init__.py
        python -c "import black; print(black.__file__)"
    
    - name: Force Reinstall Black without BOM
      run: |
        echo "üîÑ Force reinstalling Black without BOM..."
        pip uninstall -y black
        pip install --no-cache-dir --compile --global-option="--compile-bytecode" black
        find $(python -c "import site; print(site.getsitepackages()[0])") -name 'black*.py' -exec file {} \;
        echo "‚úÖ Black reinstalled"
    
    - name: Run Flake8 with Forced UTF-8
      env:
        PYTHONIOENCODING: "utf-8"
        LANG: "C.UTF-8"
      run: |
        echo "üîç Running Flake8 with forced UTF-8 encoding..."
        flake8 . --config=setup.cfg
        echo "‚úÖ Flake8 completed"
    
    - name: Run Black check
      run: |
        echo "üîç Running Black format check..."
        black --check src/
        echo "‚úÖ Black check completed"
    
    - name: Run MyPy
      run: |
        echo "üîç Running MyPy type checking..."
        mypy src/
        echo "‚úÖ MyPy completed"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      working-directory: src/frontend
      run: |
        npm ci
        npm list --depth=0
    
    - name: Verify node_modules exists
      working-directory: src/frontend
      run: |
        ls -la node_modules/
        echo "node_modules directory contents verified"
    
    - name: Run Python security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Security Scan
      working-directory: ./src/frontend
      run: |
        snyk test --file=package.json --detection-depth=5
    
    - name: Run Node.js security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --all-projects
      working-directory: src/frontend

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          aquatrak/aquatrak:latest
          aquatrak/aquatrak:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add deployment logic here 