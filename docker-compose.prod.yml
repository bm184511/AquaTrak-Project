# This code is proprietary to AquaTrak. Unauthorized use is strictly prohibited.

# =============================================================================
# PRODUCTION DOCKER-COMPOSE FOR AQUATRAK PLATFORM
# =============================================================================

version: '3.8'

services:
  # AquaTrak Backend API (Production)
  aquatrak-api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: aquatrak-api-prod
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    volumes:
      - aquatrak_uploads:/app/uploads
      - aquatrak_logs:/app/logs
      - aquatrak_static:/app/static
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: aquatrak-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./scripts/complete-db-schema.sql:/docker-entrypoint-initdb.d/complete-db-schema.sql
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: aquatrak-redis-prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: aquatrak-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
      - aquatrak_static:/usr/share/nginx/html
      - aquatrak_logs:/var/log/nginx
    depends_on:
      - aquatrak-api
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks (Production)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: aquatrak-celery-worker-prod
    command: celery -A src.common_utils.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    volumes:
      - aquatrak_uploads:/app/uploads
      - aquatrak_logs:/app/logs
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "celery", "-A", "src.common_utils.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Celery Beat for Scheduled Tasks (Production)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: aquatrak-celery-beat-prod
    command: celery -A src.common_utils.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    volumes:
      - aquatrak_logs:/app/logs
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Monitoring with Prometheus (Production)
  prometheus:
    image: prom/prometheus:latest
    container_name: aquatrak-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=10GB'
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana for Visualization (Production)
  grafana:
    image: grafana/grafana:latest
    container_name: aquatrak-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Elasticsearch for Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: aquatrak-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: aquatrak-kibana-prod
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Filebeat for Log Collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: aquatrak-filebeat-prod
    user: root
    volumes:
      - ./docker/monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - aquatrak_logs:/var/log/aquatrak:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - aquatrak-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  aquatrak_uploads:
    driver: local
  aquatrak_logs:
    driver: local
  aquatrak_static:
    driver: local

networks:
  aquatrak-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 